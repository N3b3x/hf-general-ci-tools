---
name: Documentation Workflow (Reusable)

on:
  workflow_call:
    inputs:
      doxygen_config:
        description: 'Path to Doxyfile (relative to repo root)'
        required: false
        type: string
        default: 'Doxyfile'
      output_dir:
        description: 'Generated HTML directory'
        required: false
        type: string
        default: 'docs/doxygen/html'
      run_link_check:
        description: 'Run documentation link checker'
        required: false
        type: boolean
        default: true
      link_check_paths:
        description: 'Comma-separated paths to check for broken links'
        required: false
        type: string
        default: 'docs/**,*.md,**/docs/**'
      link_check_config:
        description: 'Path to lychee.toml config file (optional)'
        required: false
        type: string
        default: ''
      verbose:
        description: 'Enable verbose output for link checking'
        required: false
        type: boolean
        default: false
      run_markdown_lint:
        description: 'Run markdown linting on documentation files'
        required: false
        type: boolean
        default: false
      markdown_lint_paths:
        description: 'Glob patterns for markdown files to lint'
        required: false
        type: string
        default: '**/*.md'
      run_spell_check:
        description: 'Run spell checking on documentation files'
        required: false
        type: boolean
        default: false
      spell_check_paths:
        description: 'Glob patterns for files to spell check'
        required: false
        type: string
        default: '**/*.md'
      spell_check_config:
        description: 'Path to cspell configuration file'
        required: false
        type: string
        default: '.cspell.json'
      deploy_pages:
        description: 'Deploy to GitHub Pages'
        required: false
        type: boolean
        default: true
      jekyll_enabled:
        description: 'Enable Jekyll static site generation'
        required: false
        type: boolean
        default: false
      jekyll_config:
        description: 'Path to Jekyll configuration file'
        required: false
        type: string
        default: '_config.yml'
      jekyll_source:
        description: 'Jekyll source directory'
        required: false
        type: string
        default: 'docs'
      jekyll_destination:
        description: 'Jekyll build destination'
        required: false
        type: string
        default: '_site'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Install Jekyll dependencies
        if: ${{ inputs.jekyll_enabled == 'true' }}
        run: |
          sudo apt-get install -y ruby-full build-essential zlib1g-dev
          sudo gem install jekyll bundler
          # Always create a GitHub Pages-compatible Gemfile for consistent builds
          echo "✅ Creating GitHub Pages-compatible Gemfile for consistent builds"
          echo "source 'https://rubygems.org'" > Gemfile
          echo "gem 'github-pages', group: :jekyll_plugins" >> Gemfile
          bundle install

      - name: Install Node.js dependencies
        if: ${{ inputs.run_markdown_lint == 'true' || inputs.run_spell_check == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install markdownlint
        if: ${{ inputs.run_markdown_lint == 'true' }}
        run: npm install -g markdownlint-cli

      - name: Install cspell
        if: ${{ inputs.run_spell_check == 'true' }}
        run: npm install -g cspell

      - name: Generate Doxygen documentation
        run: |
          if [ -f "${{ inputs.doxygen_config }}" ]; then
            doxygen ${{ inputs.doxygen_config }}
            echo "✅ Doxygen documentation generated successfully"
          else
            echo "⚠️  Doxyfile not found at ${{ inputs.doxygen_config }}, skipping Doxygen generation"
          fi

      - name: Build Jekyll site
        if: ${{ inputs.jekyll_enabled == 'true' }}
        run: |
          JEKYLL_SOURCE="${{ inputs.jekyll_source }}"
          JEKYLL_CONFIG="${{ inputs.jekyll_config }}"
          JEKYLL_DEST="${{ inputs.jekyll_destination }}"
          # Check if _config.yml exists, create minimal one if missing
          if [ ! -f "$JEKYLL_SOURCE/$JEKYLL_CONFIG" ]; then
            echo "⚠️  Jekyll config not found, creating minimal _config.yml"
            cat > "$JEKYLL_SOURCE/$JEKYLL_CONFIG" << 'EOF'
          title: "Project Documentation"
          description: "Documentation for the project"
          theme: minima
          plugins:
            - jekyll-feed
            - jekyll-sitemap
            - jekyll-seo-tag
          markdown: kramdown
          highlighter: rouge
          EOF
            echo "✅ Created minimal _config.yml"
          fi
          BASEURL="${{ steps.pages.outputs.base_path }}"
          echo "Using Pages base_path: $BASEURL"
          jekyll build \
            --source "$JEKYLL_SOURCE" \
            --destination "$JEKYLL_DEST" \
            --baseurl "$BASEURL"
          echo "✅ Jekyll site built successfully"

      - name: Run markdown linting
        if: ${{ inputs.run_markdown_lint == 'true' }}
        run: |
          markdownlint ${{ inputs.markdown_lint_paths }} || {
            echo "❌ Markdown linting failed"
            exit 1
          }
          echo "✅ Markdown linting passed"

      - name: Run spell checking
        if: ${{ inputs.run_spell_check == 'true' }}
        run: |
          if [ -f "${{ inputs.spell_check_config }}" ]; then
            cspell ${{ inputs.spell_check_paths }} --config ${{ inputs.spell_check_config }} || {
              echo "❌ Spell checking failed"
              exit 1
            }
          else
            cspell ${{ inputs.spell_check_paths }} || {
              echo "❌ Spell checking failed"
              exit 1
            }
          fi
          echo "✅ Spell checking passed"

      - name: Link check with Lychee
        if: ${{ inputs.run_link_check == 'true' }}
        uses: lycheeverse/lychee-action@v2
        with:
          args: >-
            ${{ inputs.link_check_config != '' && format('--config {0}', inputs.link_check_config) || '' }}
            --no-progress
            ${{ inputs.verbose == 'true' && '--verbose' || '' }}
            --format detailed
            --timeout 10
            --retry 3
            --exclude-all-private
            --exclude-mail
            ${{ inputs.link_check_paths }}
          fail: true

      - name: Prepare deployment artifacts
        run: |
          if [ "${{ inputs.jekyll_enabled }}" == "true" ] && [ -d "${{ inputs.jekyll_destination }}" ]; then
            echo "Using Jekyll build output: ${{ inputs.jekyll_destination }}"
            DEPLOY_PATH="${{ inputs.jekyll_destination }}"
          elif [ -d "${{ inputs.output_dir }}" ]; then
            echo "Using Doxygen output: ${{ inputs.output_dir }}"
            DEPLOY_PATH="${{ inputs.output_dir }}"
          else
            echo "No documentation found to deploy"
            exit 1
          fi
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: ${{ env.DEPLOY_PATH }}
          retention-days: 7

      - name: Upload Pages artifact
        if: ${{ inputs.deploy_pages == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.DEPLOY_PATH }}

  deploy:
    if: ${{ inputs.deploy_pages == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
