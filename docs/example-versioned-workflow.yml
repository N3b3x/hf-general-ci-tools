---
# Example: Versioned Documentation Workflow
# This is an example of how to use the enhanced docs.yml workflow with versioning
#
# Key Features:
# - Automatic version detection from git tags/branches
# - Versioned deployment to gh-pages branch
# - Doxygen API documentation with versioning
# - Jekyll site generation with front matter navigation
# - Quality assurance (link checking, linting, spell checking)

name: 'üìö Publish Versioned Documentation'

on:
  push:
    branches: ['main', 'release/*']
  pull_request:
    branches: ['main']
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version to deploy (optional)'
        required: false
        type: string

permissions:
  contents: 'read'
  pages: 'write'
  id-token: 'write'

concurrency:
  group: 'docs-with-versioning-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Versioned Documentation Build and Deploy
  # =============================================================================
  publish-docs:
    uses: 'N3b3x/hf-general-ci-tools/.github/workflows/docs.yml@main'
    with:
      # =============================================================================
      # Repository Configuration
      # =============================================================================
      checkout_recursive: 'true'  # Enable submodule checkout if needed

      # =============================================================================
      # Quality Assurance
      # =============================================================================
      run_link_check: 'true'
      link_check_paths: '**/*.md'
      link_check_config: ''  # Optional lychee.toml config
      verbose: 'true'

      run_markdown_lint: 'true'
      markdown_lint_paths: '**/*.md'

      run_spell_check: 'false'  # Enable if you have .cspell.json
      spell_check_paths: '**/*.md'
      spell_check_config: '.cspell.json'

      # =============================================================================
      # Versioning Configuration (Always Enabled)
      # =============================================================================
      deployment_branch: 'gh-pages'  # Branch for deployment (required for versioned documentation)

      # =============================================================================
      # Doxygen Configuration
      # =============================================================================
      # Note: Doxygen versioning is automatically synchronized with git-based versioning.
      # Doxygen artifacts are centrally managed in /doxs/ and symlinked to Jekyll sites
      # for seamless integration.
      doxygen_config: 'Doxyfile'         # Path to your Doxyfile
      doxygen_fail_on_warnings: 'false'  # Set to true for strict builds

      # =============================================================================
      # Jekyll Configuration
      # =============================================================================
      jekyll_enabled: 'true'
      jekyll_source: '.'  # Your Jekyll source directory (where all your markdown files can be accessed from)
      jekyll_destination: '_site'  # Build output directory
      jekyll_environment: 'production'  # Jekyll environment (affects config loading)
      jekyll_config: '_config.yml'  # Your Jekyll config file (optional, defaults to _config.yml)

      # =============================================================================
      # Deployment
      # =============================================================================
      deploy_pages: 'true'  # Deploy to GitHub Pages

  # =============================================================================
  # Optional: Notify on Success/Failure
  # =============================================================================
  notify:
    needs: publish-docs
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.publish-docs.result == 'success'
        run: |
          echo "‚úÖ Documentation deployed successfully!"
          echo "üåê Check your GitHub Pages for the latest version"

      - name: Notify Failure
        if: needs.publish-docs.result == 'failure'
        run: |
          echo "‚ùå Documentation deployment failed!"
          echo "Check the workflow logs for details"
